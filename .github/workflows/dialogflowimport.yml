name: Deploy Dialogflow CX Agent

on:
  push:
    branches: [ "DialogFlow" ]
 
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
          
      - name: Install tools + cxcli
        run: |
          set -e
          sudo apt-get update -y
          sudo apt-get install -y zip unzip curl
          CXCLI_URL="https://github.com/GoogleCloudPlatform/dialogflow-cx-cli/releases/latest/download/cxcli_Linux_x86_64.tar.gz"
          curl -L -o cxcli.tar.gz "$CXCLI_URL"
          mkdir cxcli_unpack
          tar -xzf cxcli.tar.gz -C cxcli_unpack
          echo "Archive contents:"
          find cxcli_unpack -maxdepth 3 -type f -size +0c -printf '%P\n'
          # Find the binary named 'cxcli'
          CXCLI_PATH=$(find cxcli_unpack -type f -name cxcli -perm -u+x | head -n1)
          if [ -z "$CXCLI_PATH" ]; then
            # Try making a candidate executable if present
            CANDIDATE=$(find cxcli_unpack -type f -name cxcli | head -n1)
            [ -n "$CANDIDATE" ] && chmod +x "$CANDIDATE" && CXCLI_PATH="$CANDIDATE"
          fi
          if [ -z "$CXCLI_PATH" ]; then
            echo "cxcli binary not found in archive"; exit 1
          fi
          sudo install -m 755 "$CXCLI_PATH" /usr/local/bin/cxcli
          cxcli --version
        
      - name: Zip Dialogflow CX agent
        run: |
          zip -r agent.blob agent.json flows intents webhooks generativeSettings

      - name: Verify blob
        run: |
          test -f agent.blob || (echo "agent.blob not created"; exit 1)
          
      - name: Restore CX Agent with cxcli
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          LOCATION_ID: ${{ secrets.GCP_AGENT_REGION }}
          AGENT_ID: ${{ secrets.GCP_AGENT_ID }}
        run: |
          cxcli agent restore "$AGENT_ID" \
            --project-id "$PROJECT_ID" \
            --location-id "$LOCATION_ID" \
            --input agent.blob
